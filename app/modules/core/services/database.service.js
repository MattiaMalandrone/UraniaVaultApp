"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
// nativescript
var appSettings = require("application-settings");
var Sqlite = require("nativescript-sqlite");
var DatabaseService = /** @class */ (function () {
    /**
     *
     */
    function DatabaseService() {
        // "https://urania-vault-node.herokuapp.com"
        // "http://10.0.2.2:5000"
        this.removeItem(DatabaseService_1.KEYS.host);
        this.setItem(DatabaseService_1.KEYS.host, "https://urania-vault-node.herokuapp.com");
    }
    DatabaseService_1 = DatabaseService;
    /**
     *
     * @param key
     * @param value
     */
    DatabaseService.prototype.setItem = function (key, value) {
        appSettings.setString(key, JSON.stringify(value));
    };
    /**
     *
     * @param key
     */
    DatabaseService.prototype.getItem = function (key) {
        var item = appSettings.getString(key);
        if (item) {
            return JSON.parse(item);
        }
        return item;
    };
    /**
     *
     * @param key
     */
    DatabaseService.prototype.removeItem = function (key) {
        appSettings.remove(key);
    };
    /**
     *
     */
    DatabaseService.prototype.initSqlite = function () {
        var _this = this;
        console.log('INIT SQLITE...');
        (new Sqlite("my.uraniaVault")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS relations (_id INTEGER PRIMARY KEY,\n                                                              alboId TEXT,\n                                                              userId TEXT,\n                                                              status INTEGER)").then(function () {
                console.log(db);
                _this.sqliteDb = db;
                console.log('Sqlite DB Created (if not exists yet)');
            }, function (error) { return console.log("CREATE TABLE ERROR", error); });
        }, function (error) { return console.log("OPEN DB ERROR", error); });
    };
    /**
     *
     */
    DatabaseService.prototype.postSqlite = function (alboId, userId, status) {
        console.log('postSqlite....');
        return this.sqliteDb.execSQL("INSERT INTO relations (alboId, userId, status) VALUES (?, ?, ?)", [alboId, userId, status]).then(function (id) {
            console.log("INSERT RESULT", id);
        }, function (error) {
            console.log("INSERT ERROR", error);
        });
    };
    /**
     *
     */
    DatabaseService.prototype.patchSqlite = function (alboId, userId, status) {
        console.log('patchSqlite....');
        return this.sqliteDb.execSQL("UPDATE relations SET status = ? WHERE alboId = ? AND userId = ?", [status, alboId, userId]).then(function (id) {
            console.log("UPDATE RESULT", id);
        }, function (error) {
            console.log("UPDATE ERROR", error);
        });
    };
    /**
     *
     */
    DatabaseService.prototype.existsSqlite = function (alboId, userId) {
        return this.sqliteDb.get("SELECT * FROM relations WHERE alboId = ? AND userId = ?", [alboId, userId]).then(function (res) {
            console.log("RESULT SELECT", res);
            return res == null ? false : true;
        }, function (error) {
            console.log("RESULT SELECT", error);
            return error;
        });
    };
    /**
     *
     */
    DatabaseService.prototype.getOfflineData = function (userId) {
        return this.sqliteDb.get("SELECT * FROM relations WHERE userId = ?", [userId]).then(function (res) {
            console.log("RESULT SELECT", res);
            return res;
        }, function (error) {
            console.log("RESULT SELECT", error);
            return error;
        });
    };
    /**
     *
     */
    DatabaseService.prototype.removeDatabaseSqlite = function () {
        console.log("DB uraniaVault exists: ", Sqlite.exists("my.uraniaVault"));
        if (Sqlite.exists("my.uraniaVault")) {
            console.log('cancello sqlite db');
            Sqlite.deleteDatabase("my.uraniaVault");
        }
    };
    DatabaseService.KEYS = {
        currentUser: 'current-user',
        accessToken: 'access-token',
        host: 'host'
    };
    DatabaseService = DatabaseService_1 = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], DatabaseService);
    return DatabaseService;
    var DatabaseService_1;
}());
exports.DatabaseService = DatabaseService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImRhdGFiYXNlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBMkM7QUFFM0MsZUFBZTtBQUNmLGtEQUFvRDtBQUVwRCxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQVM5QztJQVlJOztPQUVHO0lBQ0g7UUFDSSw0Q0FBNEM7UUFDNUMseUJBQXlCO1FBQ3pCLElBQUksQ0FBQyxVQUFVLENBQUMsaUJBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxpQkFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUseUNBQXlDLENBQUMsQ0FBQztJQUN2RixDQUFDO3dCQXBCUSxlQUFlO0lBc0J4Qjs7OztPQUlHO0lBQ0ksaUNBQU8sR0FBZCxVQUFlLEdBQVcsRUFBRSxLQUFVO1FBQ2xDLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN0RCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksaUNBQU8sR0FBZCxVQUFlLEdBQVc7UUFDdEIsSUFBSSxJQUFJLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN0QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1AsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsQ0FBQztRQUNELE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVEOzs7T0FHRztJQUNJLG9DQUFVLEdBQWpCLFVBQWtCLEdBQVc7UUFDekIsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBR0Q7O09BRUc7SUFDSSxvQ0FBVSxHQUFqQjtRQUFB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QyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQUEsR0FBRztZQUNuRixPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUNsQyxNQUFNLENBQUMsR0FBRyxDQUFDO1FBQ2YsQ0FBQyxFQUFFLFVBQUEsS0FBSztZQUNKLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3BDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFDakIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQ7O09BRUc7SUFDSSw4Q0FBb0IsR0FBM0I7UUFDSSxPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO1FBQ3hFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1lBQ2xDLE1BQU0sQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUM1QyxDQUFDO0lBQ0wsQ0FBQztJQTNIYSxvQkFBSSxHQUFVO1FBQ3hCLFdBQVcsRUFBRSxjQUFjO1FBQzNCLFdBQVcsRUFBRSxjQUFjO1FBQzNCLElBQUksRUFBRSxNQUFNO0tBQ2YsQ0FBQztJQVZPLGVBQWU7UUFEM0IsaUJBQVUsRUFBRTs7T0FDQSxlQUFlLENBa0kzQjtJQUFELHNCQUFDOztDQUFBLEFBbElELElBa0lDO0FBbElZLDBDQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XHJcblxyXG4vLyBuYXRpdmVzY3JpcHRcclxuaW1wb3J0ICogYXMgYXBwU2V0dGluZ3MgZnJvbSAnYXBwbGljYXRpb24tc2V0dGluZ3MnO1xyXG5cclxuY29uc3QgU3FsaXRlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1zcWxpdGVcIik7XHJcblxyXG5pbnRlcmZhY2UgSUtleXMge1xyXG4gICAgY3VycmVudFVzZXI6IHN0cmluZztcclxuICAgIGFjY2Vzc1Rva2VuOiBzdHJpbmc7XHJcbiAgICBob3N0OiBzdHJpbmc7XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIERhdGFiYXNlU2VydmljZSB7XHJcblxyXG4gICAgcHVibGljIGlzT2ZmbGluZTogYm9vbGVhbjtcclxuXHJcbiAgICBwdWJsaWMgc3FsaXRlRGI6IGFueTtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIEtFWVM6IElLZXlzID0ge1xyXG4gICAgICAgIGN1cnJlbnRVc2VyOiAnY3VycmVudC11c2VyJyxcclxuICAgICAgICBhY2Nlc3NUb2tlbjogJ2FjY2Vzcy10b2tlbicsXHJcbiAgICAgICAgaG9zdDogJ2hvc3QnXHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgLy8gXCJodHRwczovL3VyYW5pYS12YXVsdC1ub2RlLmhlcm9rdWFwcC5jb21cIlxyXG4gICAgICAgIC8vIFwiaHR0cDovLzEwLjAuMi4yOjUwMDBcIlxyXG4gICAgICAgIHRoaXMucmVtb3ZlSXRlbShEYXRhYmFzZVNlcnZpY2UuS0VZUy5ob3N0KTtcclxuICAgICAgICB0aGlzLnNldEl0ZW0oRGF0YWJhc2VTZXJ2aWNlLktFWVMuaG9zdCwgXCJodHRwczovL3VyYW5pYS12YXVsdC1ub2RlLmhlcm9rdWFwcC5jb21cIik7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGtleVxyXG4gICAgICogQHBhcmFtIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzZXRJdGVtKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZCB7XHJcbiAgICAgICAgYXBwU2V0dGluZ3Muc2V0U3RyaW5nKGtleSwgSlNPTi5zdHJpbmdpZnkodmFsdWUpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ga2V5XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXRJdGVtKGtleTogc3RyaW5nKTogYW55IHtcclxuICAgICAgICBsZXQgaXRlbSA9IGFwcFNldHRpbmdzLmdldFN0cmluZyhrZXkpO1xyXG4gICAgICAgIGlmIChpdGVtKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKGl0ZW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ga2V5XHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZW1vdmVJdGVtKGtleTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgYXBwU2V0dGluZ3MucmVtb3ZlKGtleSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqL1xyXG4gICAgcHVibGljIGluaXRTcWxpdGUoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ0lOSVQgU1FMSVRFLi4uJyk7XHJcblxyXG4gICAgICAgIChuZXcgU3FsaXRlKFwibXkudXJhbmlhVmF1bHRcIikpLnRoZW4oZGIgPT4ge1xyXG4gICAgICAgICAgICBkYi5leGVjU1FMKGBDUkVBVEUgVEFCTEUgSUYgTk9UIEVYSVNUUyByZWxhdGlvbnMgKF9pZCBJTlRFR0VSIFBSSU1BUlkgS0VZLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsYm9JZCBURVhULFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJJZCBURVhULFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1cyBJTlRFR0VSKWApLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZGIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zcWxpdGVEYiA9IGRiO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NxbGl0ZSBEQiBDcmVhdGVkIChpZiBub3QgZXhpc3RzIHlldCknKTtcclxuICAgICAgICAgICAgfSwgZXJyb3IgPT4gY29uc29sZS5sb2coXCJDUkVBVEUgVEFCTEUgRVJST1JcIiwgZXJyb3IpKTtcclxuICAgICAgICB9LCBlcnJvciA9PiBjb25zb2xlLmxvZyhcIk9QRU4gREIgRVJST1JcIiwgZXJyb3IpKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBwb3N0U3FsaXRlKGFsYm9JZCwgdXNlcklkLCBzdGF0dXMpIHtcclxuICAgICAgICBjb25zb2xlLmxvZygncG9zdFNxbGl0ZS4uLi4nKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zcWxpdGVEYi5leGVjU1FMKFwiSU5TRVJUIElOVE8gcmVsYXRpb25zIChhbGJvSWQsIHVzZXJJZCwgc3RhdHVzKSBWQUxVRVMgKD8sID8sID8pXCIsIFthbGJvSWQsIHVzZXJJZCwgc3RhdHVzXSkudGhlbihpZCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSU5TRVJUIFJFU1VMVFwiLCBpZCk7XHJcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIklOU0VSVCBFUlJPUlwiLCBlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcGF0Y2hTcWxpdGUoYWxib0lkLCB1c2VySWQsIHN0YXR1cykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdwYXRjaFNxbGl0ZS4uLi4nKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zcWxpdGVEYi5leGVjU1FMKFwiVVBEQVRFIHJlbGF0aW9ucyBTRVQgc3RhdHVzID0gPyBXSEVSRSBhbGJvSWQgPSA/IEFORCB1c2VySWQgPSA/XCIsIFtzdGF0dXMsIGFsYm9JZCwgdXNlcklkXSkudGhlbihpZCA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVVBEQVRFIFJFU1VMVFwiLCBpZCk7XHJcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVQREFURSBFUlJPUlwiLCBlcnJvcik7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZXhpc3RzU3FsaXRlKGFsYm9JZCwgdXNlcklkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3FsaXRlRGIuZ2V0KFwiU0VMRUNUICogRlJPTSByZWxhdGlvbnMgV0hFUkUgYWxib0lkID0gPyBBTkQgdXNlcklkID0gP1wiLCBbYWxib0lkLCB1c2VySWRdKS50aGVuKHJlcyA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUkVTVUxUIFNFTEVDVFwiLCByZXMpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzID09IG51bGwgPyBmYWxzZSA6IHRydWU7XHJcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJFU1VMVCBTRUxFQ1RcIiwgZXJyb3IpO1xyXG4gICAgICAgICAgICByZXR1cm4gZXJyb3I7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgZ2V0T2ZmbGluZURhdGEodXNlcklkKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3FsaXRlRGIuZ2V0KFwiU0VMRUNUICogRlJPTSByZWxhdGlvbnMgV0hFUkUgdXNlcklkID0gP1wiLCBbdXNlcklkXSkudGhlbihyZXMgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJFU1VMVCBTRUxFQ1RcIiwgcmVzKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcztcclxuICAgICAgICB9LCBlcnJvciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUkVTVUxUIFNFTEVDVFwiLCBlcnJvcik7XHJcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyByZW1vdmVEYXRhYmFzZVNxbGl0ZSgpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIkRCIHVyYW5pYVZhdWx0IGV4aXN0czogXCIsIFNxbGl0ZS5leGlzdHMoXCJteS51cmFuaWFWYXVsdFwiKSk7XHJcbiAgICAgICAgaWYgKFNxbGl0ZS5leGlzdHMoXCJteS51cmFuaWFWYXVsdFwiKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnY2FuY2VsbG8gc3FsaXRlIGRiJyk7XHJcbiAgICAgICAgICAgIFNxbGl0ZS5kZWxldGVEYXRhYmFzZShcIm15LnVyYW5pYVZhdWx0XCIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=